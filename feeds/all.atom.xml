<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>UC Berkeley's Stat 133</title><link href="http://berkeley-stat133.github.io/website/" rel="alternate"></link><link href="http://berkeley-stat133.github.io/website/feeds/all.atom.xml" rel="self"></link><id>http://berkeley-stat133.github.io/website/</id><updated>2014-04-18T00:00:00-07:00</updated><entry><title>Lecture notebooks and material</title><link href="http://berkeley-stat133.github.io/website/material.html" rel="alternate"></link><updated>2014-04-18T00:00:00-07:00</updated><author><name>Benoit Dherin</name></author><id>tag:berkeley-stat133.github.io,2014-04-18:website/material.html</id><summary type="html">&lt;p&gt;You will find here all the material needed for this class, including
the iPython class notebooks (which you can also access following
the links on the right). The class deadlines, projects and homework
instructions, and lecture topics can be found on the &lt;a href="pages/schedule"&gt;schedule page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For each topic covered in class, start by reviewing the 
corresponding ipython class notebooks listed below (i.e. the notebooks we
filled in together in class). Then, use the ressources listed 
below the class notebooks for each of the class parts,
if you need further explanations or more practice. &lt;/p&gt;
&lt;h2&gt;Part I: Basics of programming with Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://benoitdherin.github.io/python-basics/"&gt;Class iPython notebooks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://learnpythonthehardway.org/book/"&gt;Learning Python the Hard Way&lt;/a&gt;, by Zed. A. Shaw&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://proquest.safaribooksonline.com/book/programming/python/9781449323592"&gt;Python for Data Analysis&lt;/a&gt;, by Wes McKinney (Especially Ch.4 and ch.5)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codecademy.com/tracks/python"&gt;Python Codecademy&lt;/a&gt; from &lt;a href="http://www.codecademy.com/"&gt;Codecademy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Part II: Basics of programming with R&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://benoitdherin.github.io/R-basics"&gt;Class iPython notebooks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.nostarch.com/artofr.htm"&gt;The art of R programming&lt;/a&gt;, by Norman Matloff&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tryr.codeschool.com"&gt;Try R&lt;/a&gt; from &lt;a href="https://www.codeschool.com"&gt;code school&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Part III: Basics of data analysis (mostly R)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://benoitdherin.github.io/data-analysis-with-R/"&gt;Class iPython notebooks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://accounts.coursera.org/signin?course_id=970433&amp;amp;r=https%3A%2F%2Fclass.coursera.org%2Fintrostats-001%2Flecture&amp;amp;user_action=class&amp;amp;topic_name=Statistics%3A%20Making%20Sense%20of%20Data"&gt;Making Sense of Data&lt;/a&gt; online free course videos by &lt;a href="https://www.coursera.org/"&gt;Coursera&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.stat.berkeley.edu/~s133/all2011.pdf"&gt;Stat 133 Lecture Notes&lt;/a&gt; by Phil Spector&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.r-tutor.com/"&gt;R Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://link.springer.com/book/10.1007/978-0-387-79054-1"&gt;Introductory Statistics with R&lt;/a&gt; by Peter Dalgaard&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Working with docstrings and tests</title><link href="http://berkeley-stat133.github.io/website/lab04.html" rel="alternate"></link><updated>2014-02-21T00:00:00-08:00</updated><author><name>Jarrod Millman</name></author><id>tag:berkeley-stat133.github.io,2014-02-21:website/lab04.html</id><summary type="html">&lt;p&gt;In this lab, you will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Work on the cloud&lt;/li&gt;
&lt;li&gt;Complete your assignment&lt;/li&gt;
&lt;li&gt;Submit your assignment&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  Several people had issues with indentation last week.
This was due to using tabs.  You should always use space when
indenting Python code.  The recommended standard is to use 4 spaces
for each code level.
See &lt;a href="http://legacy.python.org/dev/peps/pep-0008/#tabs-or-spaces"&gt;this&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Workflow recap:&lt;/strong&gt; This workflow may take some time to become accustomed
to, but this is the basic process you will use for the rest of the
semester:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;At the start of each lab, use &lt;code&gt;git pull&lt;/code&gt; from inside your local
   repository (or &lt;code&gt;git clone&lt;/code&gt; if you don't have a local repository)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; to add and commit new files or changes
   to existing files in your repository (you can use &lt;code&gt;git status&lt;/code&gt;
   and &lt;code&gt;git log&lt;/code&gt; to make sure you know what is going on with your
   repo)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git push&lt;/code&gt; to push your changes to Github so that I can see your
   work and assign grades&lt;/li&gt;
&lt;li&gt;Repeat the following week&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Work on the cloud&lt;/h2&gt;
&lt;p&gt;I will assume you are working on the cloud.  So all the commands assume
you are on the cloud.&lt;/p&gt;
&lt;p&gt;First, open your Bash terminal and make sure you are in the top-level
directory of your lab repository.  Check where you are using the &lt;code&gt;pwd&lt;/code&gt;
command.  If you aren't in the correct directory, just &lt;code&gt;cd&lt;/code&gt; to the
correct directory. Once you are in the correct directory, you should
use &lt;code&gt;git pull&lt;/code&gt; to pull the changes on the remote Github repo
into your local repository.&lt;/p&gt;
&lt;h2&gt;Complete your assignment&lt;/h2&gt;
&lt;p&gt;Now that you have pulled from your Github repo, you should see a
new file called &lt;code&gt;lab4.py&lt;/code&gt;.  Open this with &lt;code&gt;gedit&lt;/code&gt;.  At
the top of the file you will see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;This is lab 4.  Please do *not* remove any of the docstrings&lt;/span&gt;
&lt;span class="s"&gt;from this document.  Docstrings are an important part of a&lt;/span&gt;
&lt;span class="s"&gt;Python program:&lt;/span&gt;

&lt;span class="s"&gt;    A docstring is a string literal that occurs as the first&lt;/span&gt;
&lt;span class="s"&gt;    statement in a module, function, class, or method definition.&lt;/span&gt;
&lt;span class="s"&gt;    Such a docstring becomes the __doc__ special attribute of&lt;/span&gt;
&lt;span class="s"&gt;    that object.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is followed by a class stub.  Your assignment
is to replace the body of the function (i.e., find all
instances of &lt;code&gt;return NotImplemented&lt;/code&gt; and replace with working
code) with valid Python code that behaves as specified by
the docstring.&lt;/p&gt;
&lt;p&gt;Please don't remove the docstrings.  You can read more about
them at the top of &lt;code&gt;lab4.py&lt;/code&gt;.  The docstrings include tests,
which you can use to test your implementation as you go.&lt;/p&gt;
&lt;p&gt;To run all the doctests, you can type the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python lab4.py -v
Trying:
    &lt;span class="nv"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abcdefghijklmnopqrstuvwxyz&amp;quot;&lt;/span&gt;
Expecting nothing
ok
Trying:
    alphabet&lt;span class="o"&gt;[&lt;/span&gt;::-1&lt;span class="o"&gt;]&lt;/span&gt;
Expecting:
    &lt;span class="s1"&gt;&amp;#39;zyxwvutsrqponmlkjihgfedcba&amp;#39;&lt;/span&gt;
ok
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will see much more than this on your computer.  The &lt;code&gt;-v&lt;/code&gt;
option runs the tests in verbose mode.  This means that it will
print out information even when the tests pass.  By default,
it will only print out information when there are errors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python lab4.py 
**********************************************************************
File &lt;span class="s2"&gt;&amp;quot;lab4.py&amp;quot;&lt;/span&gt;, line 76, in __main__.Cipher
Failed example:
    &lt;span class="nv"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Cipher&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reverse&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Exception raised:
    Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
      File &lt;span class="s2"&gt;&amp;quot;/usr/lib64/python2.7/doctest.py&amp;quot;&lt;/span&gt;, line 1289, in __run
        compileflags, 1&lt;span class="o"&gt;)&lt;/span&gt; in test.globs
      File &lt;span class="s2"&gt;&amp;quot;&amp;lt;doctest __main__.Cipher[0]&amp;gt;&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
        &lt;span class="nv"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Cipher&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reverse&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    TypeError: __init__&lt;span class="o"&gt;()&lt;/span&gt; should &lt;span class="k"&gt;return &lt;/span&gt;None, not &lt;span class="s1"&gt;&amp;#39;NotImplementedType&amp;#39;&lt;/span&gt;
**********************************************************************
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should run &lt;code&gt;python lab4.py&lt;/code&gt;, find an error, try to fix it,
and rerun &lt;code&gt;python lab4.py&lt;/code&gt;.  Once you have no errors, you will
see this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python lab4.py
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is because everything passed.  To double-check that everything
passed, use the &lt;code&gt;-v&lt;/code&gt; option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python lab4.py -v
Trying:
    &lt;span class="nv"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abcdefghijklmnopqrstuvwxyz&amp;quot;&lt;/span&gt;
Expecting nothing
ok
Trying:
    alphabet&lt;span class="o"&gt;[&lt;/span&gt;::-1&lt;span class="o"&gt;]&lt;/span&gt;
Expecting:
    &lt;span class="s1"&gt;&amp;#39;zyxwvutsrqponmlkjihgfedcba&amp;#39;&lt;/span&gt;
ok
  ....  &amp;lt;snip&amp;gt;  ....

Trying:
    hybrid.encrypt&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;abcdefghijklmnopqrstuvwxyz&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Expecting:
    &lt;span class="s1"&gt;&amp;#39;nmlkjihgfedcbazyxwvutsrqpo&amp;#39;&lt;/span&gt;
ok
4 items had no tests:
    __main__.Cipher.__init__
    __main__.Cipher.decrypt
    __main__.Cipher.encrypt
    __main__.Cipher.isvalid
2 items passed all tests:
  10 tests in __main__
  10 tests in __main__.Cipher
20 tests in 6 items.
20 passed and 0 failed.
Test passed.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Submit your work&lt;/h2&gt;
&lt;p&gt;You will submit your work using &lt;code&gt;git push&lt;/code&gt; to put a complete
copy of your local repo on Gitub, so that I can see it.&lt;/p&gt;
&lt;p&gt;First you will need to &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt; all the work you
wish to submit to your local repository.  You should use
&lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git log&lt;/code&gt; to make sure your repository is in
the state you expect.&lt;/p&gt;
&lt;p&gt;Once your local repository is in whatever state you wish,
you just need to push your local repository up to your remote
Github repo using &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;</summary></entry><entry><title>Adding, Committing, and Pushing</title><link href="http://berkeley-stat133.github.io/website/lab03.html" rel="alternate"></link><updated>2014-02-14T00:00:00-08:00</updated><author><name>Jarrod Millman</name></author><id>tag:berkeley-stat133.github.io,2014-02-14:website/lab03.html</id><summary type="html">&lt;p&gt;In this lab, you will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Work on the cloud&lt;/li&gt;
&lt;li&gt;Complete your assignment&lt;/li&gt;
&lt;li&gt;Submit your assignment&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  There is a short review for using &lt;code&gt;git&lt;/code&gt; and seeing your
grades at the bottom of the lab.  You may also want to review previous
labs if you are uncertain about using &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Workflow recap:&lt;/strong&gt; This workflow may take some time to become accustomed
to, but this is the basic process you will use for the rest of the
semester:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;At the start of each lab, use &lt;code&gt;git pull&lt;/code&gt; from inside your local
   repository (or &lt;code&gt;git clone&lt;/code&gt; if you don't have a local repository)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; to add and commit new files or changes
   to existing files in your repository (you can use &lt;code&gt;git status&lt;/code&gt;
   and &lt;code&gt;git log&lt;/code&gt; to make sure you know what is going on with your
   repo)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git push&lt;/code&gt; to push your changes to Github so that I can see your
   work and assign grades&lt;/li&gt;
&lt;li&gt;Repeat the following week&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Work on the cloud&lt;/h2&gt;
&lt;p&gt;You will need to start working on the cloud machine, since for your
midterm and final you will be required to work on the cloud.  If you don't
practice on it, you may find that you run into problems that could
negatively impact your grade.&lt;/p&gt;
&lt;p&gt;First, open your Bash terminal and make sure you are in the top-level
directory of your lab repository.  Check where you are using the &lt;code&gt;pwd&lt;/code&gt;
command. &lt;/p&gt;
&lt;p&gt;If you haven't been working on the cloud for the labs, you may first need
to create your "src" directory using &lt;code&gt;mkdir ~/src&lt;/code&gt; .  Then configure
&lt;code&gt;git&lt;/code&gt; using &lt;code&gt;git config&lt;/code&gt; and clone your Github repo to your cloud account
using &lt;code&gt;git clone&lt;/code&gt;.  You can refer to  &lt;a href="lab01"&gt;lab 1&lt;/a&gt; for more details, but
you will basically need to run the following commands (where you've
replaced the details in &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; with your own information):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/src
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/src
git config --global user.name &lt;span class="s2"&gt;&amp;quot;&amp;lt;Jarrod Millman&amp;gt;&amp;quot;&lt;/span&gt;
git config --global user.email &lt;span class="s2"&gt;&amp;quot;&amp;lt;millman@berkeley.edu&amp;gt;&amp;quot;&lt;/span&gt;
git clone https://github.com/&amp;lt;jarrodmillman&amp;gt;/stat133.git 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you have been working on the cloud, just &lt;code&gt;cd&lt;/code&gt; to the correct directory
and then do a &lt;code&gt;git pull&lt;/code&gt; to pull the changes in the remote Github repo
into your local repository.&lt;/p&gt;
&lt;h2&gt;Complete your assignment&lt;/h2&gt;
&lt;p&gt;Now that you have pulled from your Github repo, you should see a
new file called &lt;code&gt;lab3.py&lt;/code&gt;.  Open this with your text editor.  At
the top of the file you will see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dna&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ATGATTTTTCCATCTTTAAGTGCGATACTGTTTTGT&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;dna_bases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;T&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;rna_bases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;U&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;basecomplement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;T&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;T&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_dna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dna&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Checks whether a string is a DNA string.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    dna : string&lt;/span&gt;
&lt;span class="sd"&gt;        A string (i.e., you can assume you get a string)&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    out : bool&lt;/span&gt;
&lt;span class="sd"&gt;        Returns True, is dna is a valid DNA string (i.e,&lt;/span&gt;
&lt;span class="sd"&gt;        a string composed of the letters &amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;G&amp;#39;, or&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;T&amp;#39; (and False otherwise).&lt;/span&gt;

&lt;span class="sd"&gt;    Hint&lt;/span&gt;
&lt;span class="sd"&gt;    ----&lt;/span&gt;
&lt;span class="sd"&gt;    You may want to iterate over the string checking each character.&lt;/span&gt;

&lt;span class="sd"&gt;    Examples&lt;/span&gt;
&lt;span class="sd"&gt;    --------&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; is_dna(&amp;#39;ATGATT&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; is_dna(&amp;#39;ATGATU&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; is_dna(&amp;#39;atgatt&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; is_dna(&amp;#39;My grandMa&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;NotImplemented&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is followed by several additional function stubs.  Your assignment
is to replace the body of each function (i.e., &lt;code&gt;return NotImplemented&lt;/code&gt;)
with valid Python code that behaves as specified by the docstring.&lt;/p&gt;
&lt;h2&gt;Submit your work&lt;/h2&gt;
&lt;p&gt;You will submit your work using &lt;code&gt;git push&lt;/code&gt; to put a complete
copy of your local repo on Gitub, so that I can see it.&lt;/p&gt;
&lt;p&gt;First you will need to &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt; all the work you
wish to submit to your local repository.  You should use
&lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git log&lt;/code&gt; to make sure your repository is in
the state you expect.&lt;/p&gt;
&lt;p&gt;Once your local repository is in whatever state you wish,
you just need to push your local repository up to your remote
Github repo using &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Review:  &lt;code&gt;git&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Here are the &lt;code&gt;git&lt;/code&gt; commands you will use in this class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git
usage: git &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;args&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

The most commonly used git commands are:
   add        Add file contents to the index
   config     Get and &lt;span class="nb"&gt;set &lt;/span&gt;repository or global options
   clone      Clone a repository into a new directory   
   commit     Record changes to the repository
   log        Show commit logs
   pull       Fetch from and integrate with another repository or a &lt;span class="nb"&gt;local &lt;/span&gt;branch
   push       Update remote refs along with associated objects
   status     Show the working tree status

&lt;span class="s1"&gt;&amp;#39;git help -a&amp;#39;&lt;/span&gt; and &lt;span class="s1"&gt;&amp;#39;git help -g&amp;#39;&lt;/span&gt; lists available subcommands and some
concept guides. See &lt;span class="s1"&gt;&amp;#39;git help &amp;lt;command&amp;gt;&amp;#39;&lt;/span&gt; or &lt;span class="s1"&gt;&amp;#39;git help &amp;lt;concept&amp;gt;&amp;#39;&lt;/span&gt;
to &lt;span class="nb"&gt;read &lt;/span&gt;about a specific subcommand or concept.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you try this on your computer, you will see much more information.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;At the start of each lab, use &lt;code&gt;git pull&lt;/code&gt; from inside your local repository&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; to add and commit new files or changes
   to existing files in your repository&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git push&lt;/code&gt; to push your changes to Github so that I can see your
   work and assign grades&lt;/li&gt;
&lt;li&gt;Repeat the following week&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Review:  How can I see my grade?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I haven't submitted the grades for lab2 yet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat grades.json 
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;me@school.edu&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;grades&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;lab1&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;earned&amp;quot;&lt;/span&gt;: 12, 
            &lt;span class="s2"&gt;&amp;quot;possible&amp;quot;&lt;/span&gt;: 12
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;me&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Full Name&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;git@github.com:me/stat133.git&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can write a script based on the one you  wrote for &lt;a href="lab02"&gt;lab 2&lt;/a&gt; to
process your &lt;code&gt;grades.json&lt;/code&gt; file printing out this information in whatever
format you please, calculate and report statistics, or plot your scores.&lt;/p&gt;</summary></entry><entry><title>Submitting your labs</title><link href="http://berkeley-stat133.github.io/website/lab02.html" rel="alternate"></link><updated>2014-02-07T00:00:00-08:00</updated><author><name>Jarrod Millman</name></author><id>tag:berkeley-stat133.github.io,2014-02-07:website/lab02.html</id><summary type="html">&lt;p&gt;In this lab, you will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take your next steps with &lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Get your grade for lab 1&lt;/li&gt;
&lt;li&gt;Learn about Python dictionaries&lt;/li&gt;
&lt;li&gt;Write a little grade reporting program&lt;/li&gt;
&lt;li&gt;Submit your work for lab 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A Github educational account&lt;/li&gt;
&lt;li&gt;If you are using your own laptop, please install relevant &lt;a href="pages/software"&gt;software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;To have completed &lt;a href="lab01"&gt;lab 1&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;First things first&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;NOTE: Pay close attention to this section and ask for clarification if you
don't understand any of the steps.  Each lab will begin the same way each week.
But in future weeks, I won't provide these details and will expect you to be
able to get to your repository with out additional instructions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, open your Bash terminal and make sure you are in the top-level directory
of your lab repository.  Check where you are using the &lt;code&gt;pwd&lt;/code&gt; command.  This
is a command that you will use all the time as you become more proficient at
working on the commandline to make sure you are where you are supposed to be
in the filesystem hierarchy.&lt;/p&gt;
&lt;p&gt;If you aren't in the correct directory, you need to change your working directory
using the &lt;code&gt;cd&lt;/code&gt; command.  This is another very important command that you will
use regularly.  If you put your repository in the directory I suggested last week,
you should type the following (if not, you will need to change the command below
accordingly):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/src/stat133
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a further check, take a look at your &lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git log 
commit bbc329fe5f0672582a3ad3c70f5b86f4acc15f63
Author: Jarrod Millman &amp;lt;jarrod.millman@gmail.com&amp;gt;
Date:   Wed Jan 29 14:19:38 2014 -0800

    Add personal info

commit dead6f41c65e50f444760653205e21083caabfcc
Author: Jarrod Millman &amp;lt;jarrod.millman@gmail.com&amp;gt;
Date:   Tue Jan 28 22:29:33 2014 -0800

    Initial commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you haven't done any additional &lt;code&gt;git commit&lt;/code&gt;s since last week, this log
should be identical to the results you saw at the end of the previous lab.&lt;/p&gt;
&lt;h2&gt;Next steps with &lt;code&gt;git&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Last week, you used the following &lt;code&gt;git&lt;/code&gt; commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git
usage: git &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;args&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

The most commonly used git commands are:
   add        Add file contents to the index
   config     Get and &lt;span class="nb"&gt;set &lt;/span&gt;repository or global options
   clone      Clone a repository into a new directory   
   commit     Record changes to the repository
   log        Show commit logs
   push       Update remote refs along with associated objects
   status     Show the working tree status

&lt;span class="s1"&gt;&amp;#39;git help -a&amp;#39;&lt;/span&gt; and &lt;span class="s1"&gt;&amp;#39;git help -g&amp;#39;&lt;/span&gt; lists available subcommands and some
concept guides. See &lt;span class="s1"&gt;&amp;#39;git help &amp;lt;command&amp;gt;&amp;#39;&lt;/span&gt; or &lt;span class="s1"&gt;&amp;#39;git help &amp;lt;concept&amp;gt;&amp;#39;&lt;/span&gt;
to &lt;span class="nb"&gt;read &lt;/span&gt;about a specific subcommand or concept.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you try this on your computer, you will see much more information.  As you
will recall, I reduced the output so that it only contains commands that you used
last week.  Please read the above output carefully and try to remember how you used
these commands last week and what they did.  You've already used &lt;code&gt;git log&lt;/code&gt;
again and you will use all the above commands again today (as well as in every
other lab) with the exception of &lt;code&gt;git config&lt;/code&gt; and &lt;code&gt;git clone&lt;/code&gt;.  Since
you have already configured &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;cloned&lt;/code&gt; your repository from
Github, you won't need to do that again unless you are working on a different
computer.&lt;/p&gt;
&lt;p&gt;Today you will learn one more command:  &lt;code&gt;git pull&lt;/code&gt;.  Type &lt;code&gt;git pull --help&lt;/code&gt;
at your Bash prompt and you will see something similar to this (to exit this
you will need to type &lt;code&gt;q&lt;/code&gt; for quit):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git pull --help

NAME
       git-pull - Fetch from and integrate with another repository or a
       &lt;span class="nb"&gt;local &lt;/span&gt;branch

SYNOPSIS
       git pull &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;repository&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;refspec&amp;gt;...&lt;span class="o"&gt;]]&lt;/span&gt;

DESCRIPTION
       Incorporates changes from a remote repository into the current
       branch. In its default mode, git pull is shorthand &lt;span class="k"&gt;for &lt;/span&gt;git fetch
       followed by git merge FETCH_HEAD.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, &lt;code&gt;git pull&lt;/code&gt; will incorporate changes from a remote
repository (in your case, your Github repository).  Since last week,
I've &lt;strong&gt;cloned&lt;/strong&gt; everyone's repositories onto my laptop where I used a script
to test whether everyone correctly completed the first lab.  I assigned
grades to everyone and &lt;strong&gt;committed&lt;/strong&gt; a file named &lt;code&gt;grades.json&lt;/code&gt; to
my copy of your repository that is on my computer.  Then, so you can
see the changes I made, I &lt;strong&gt;pushed&lt;/strong&gt; my changes back to Github.&lt;/p&gt;
&lt;p&gt;In order for you to see your grade, you will need to &lt;strong&gt;pull&lt;/strong&gt; my changes
to your local repository from Github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git pull
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If everything goes successfully, you will now have an updated copy
of the repository.  Use &lt;code&gt;git log&lt;/code&gt; to see a more detailed log
of the changes.  For some of you, there may be a conflict with
what you have on your computer and what is on Github.  If you have
any problems, please ask me for help before continuing.&lt;/p&gt;
&lt;p&gt;This workflow may take some time to become accustomed to, but this is
the basic process you will use for the rest of the semester:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;At the start of each lab, use &lt;code&gt;git pull&lt;/code&gt; from inside your local repository&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; to add and commit new files of changes
   to existing files in your repository&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git push&lt;/code&gt; to push your changes to Github so that I can see your
   work and assign grades&lt;/li&gt;
&lt;li&gt;Repeat the following week&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How can I see my grade?&lt;/h2&gt;
&lt;p&gt;List the contents of your repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
grades.json  info.py  info.pyc  README.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should have a file named &lt;code&gt;grades.json&lt;/code&gt;.  To see the content of
this file, use the &lt;code&gt;cat&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat grades.json 
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;me@school.edu&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;grades&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;lab1&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;earned&amp;quot;&lt;/span&gt;: 12, 
            &lt;span class="s2"&gt;&amp;quot;possible&amp;quot;&lt;/span&gt;: 12
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;me&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Full Name&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;git@github.com:me/stat133.git&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should be fairly (human-)readable, but you will notice that there are
a lot of additional characters that you would probably not use if you were
just writing this information yourself.  The extra characters are there
because this is specific data format called &lt;a href="http://www.json.org/"&gt;JSON&lt;/a&gt;.
If you are interested, you can follow the above link and read more about
this format.  But it isn't necessary for you to know anything more at this
point other than this is a format that will allow you to load this data
into Python as a dictionary.&lt;/p&gt;
&lt;p&gt;In this lab, you are going to learn more about Python dictionaries and
write a little Python program that will read this file and print out
a little summary of your grades to the terminal.&lt;/p&gt;
&lt;h2&gt;Python dictionaries&lt;/h2&gt;
&lt;p&gt;Python &lt;a href="http://docs.python.org/2/tutorial/datastructures.html#dictionaries"&gt;dictionaries&lt;/a&gt;
provide a very useful data structure.  Let's look at a simple example.&lt;/p&gt;
&lt;p&gt;Imagine that you want to use Python to store phone numbers.  You might
create a data structure like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Jarrod Millman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="s"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;555-1234&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's see how this works at the IPython terminal (as opposed to
notebook) command prompt"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt; 
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Nov&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;IPython&lt;/span&gt; &lt;span class="mf"&gt;0.13&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;enhanced&lt;/span&gt; &lt;span class="n"&gt;Interactive&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;?&lt;/span&gt;         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Introduction&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;overview&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;IPython&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s features.&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;quickref&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Quick&lt;/span&gt; &lt;span class="n"&gt;reference&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;help&lt;/span&gt;      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s own help system.&lt;/span&gt;
&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Details&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;object??&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;tel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Jarrod Millman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="s"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;555-1234&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;tel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Jarrod Millman&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;tel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;555-1234&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What if you want to store multiple phone numbers per person?  You
could do something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Jarrod Millman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="s"&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s"&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;555-1234&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s"&gt;&amp;#39;cell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;555-1235&amp;#39;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's try this at the IPython prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;tel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Jarrod Millman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="s"&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="s"&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;555-1234&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="s"&gt;&amp;#39;cell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;555-1235&amp;#39;&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;tel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Jarrod Millman&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;tel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;555-1235&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;555-1234&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;tel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;555-1235&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;tel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;555-1234&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Lab 2 program&lt;/h2&gt;
&lt;p&gt;Now that you have a local copy of your repo, you will need to add
some new content before submitting your new lab assignment.&lt;/p&gt;
&lt;p&gt;Before adding anything, use the &lt;code&gt;tree&lt;/code&gt; command to see how your
repository directory structure looks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree
.
├── grades.json
├── info.py
└── README.md

0 directories, 3 files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note: You may not have &lt;code&gt;tree&lt;/code&gt; installed.  If not, you
can use &lt;code&gt;ls&lt;/code&gt; to list the content of your directory.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next, you will need to create some subdirectories.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p lab2/data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that you need to use the &lt;code&gt;-p&lt;/code&gt; option to create &lt;code&gt;lab2&lt;/code&gt; and
a subdirectory of &lt;code&gt;lab2&lt;/code&gt; named &lt;code&gt;data&lt;/code&gt; in one command.  Without
the &lt;code&gt;-p&lt;/code&gt; option &lt;code&gt;mkdir&lt;/code&gt; will complain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir  lab2/data
mkdir: cannot create directory ‘lab2/data’: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This error message occurs because the &lt;code&gt;mkdir&lt;/code&gt; command without the &lt;code&gt;-p&lt;/code&gt;
option will try to create the subdirectory &lt;code&gt;data&lt;/code&gt; inside the directory
&lt;code&gt;lab2&lt;/code&gt;, which doesn't exist yet.  The &lt;code&gt;-p&lt;/code&gt; options tells &lt;code&gt;mkdir&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree
.
├── grades.json
├── info.py
├── lab2
│   └── data
└── README.md

2 directories, 3 files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next you need to write a Python script that creates a Python
dictionary of grades and saves that information to &lt;code&gt;data/test.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Make sure you are in the lab2 directory (reminder: use &lt;code&gt;pwd&lt;/code&gt; to find
out where you are and &lt;code&gt;cd&lt;/code&gt; to change your working directory).  Next,
open your text editor and create a new file, called &lt;code&gt;mkgrade.py&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are on MacOS, you should be able to type:
&lt;code&gt;edit mkgrade.py&lt;/code&gt;.  If you are on Windows, you will first need to
add the following lines to your &lt;code&gt;~/.bashrc&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/c/Program&lt;span class="se"&gt;\ &lt;/span&gt;Files/Notepad++:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;notepad++&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On some computers you will need to add this instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/c/Program&lt;span class="se"&gt;\ &lt;/span&gt;Files&lt;span class="se"&gt;\ \(&lt;/span&gt;x86&lt;span class="se"&gt;\)&lt;/span&gt;/Notepad++:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;notepad++&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you have any problems with this step, please ask for assistance.
I will expect everyone to be able to open their text editor
from the Bash prompt using the command &lt;code&gt;edit&lt;/code&gt;.  So please
don't skip this step.&lt;/p&gt;
&lt;p&gt;In order for Bash to execute this code, type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;. ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now Windows users should be able to type: &lt;code&gt;edit mkgrade.py&lt;/code&gt; as well.
If you have any troubles with this step, please ask for help.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Now add the following content to &lt;code&gt;mkgrade.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# First import the Python JSON package&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Student A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s"&gt;&amp;quot;grades&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;lab1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;earned&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;possible&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;lab2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;earned&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;possible&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;lab3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;earned&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;possible&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;#### begin CORRECTION NEEDED&lt;/span&gt;
&lt;span class="n"&gt;outfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c"&gt;# open the file &amp;#39;data/test.json&amp;#39; for writing&lt;/span&gt;
&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# close the file&lt;/span&gt;
&lt;span class="c"&gt;#### end CORRECTION NEEDED&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save this file and trying running it from the commandline:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python mkgrade.py 
  File &lt;span class="s2"&gt;&amp;quot;mkgrade.py&amp;quot;&lt;/span&gt;, line 19
    &lt;span class="nv"&gt;outfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c"&gt;# open the file &amp;#39;data/test.json&amp;#39; for writing&lt;/span&gt;
                                                         ^
SyntaxError: invalid syntax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should get the error message displayed above.  Before
continuing you need to correct the script.&lt;/p&gt;
&lt;p&gt;At the bottom of the file, you need to add some code to
open and close the file.  I've already added the line
needed to write the &lt;code&gt;grades&lt;/code&gt; dictionary to the file:
(i.e., &lt;code&gt;json.dump(student, outfile, sort_keys = True, indent = 4)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Open the script back up with your text editor and correct
the errors so that the script correctly creates the
necessary file.&lt;/p&gt;
&lt;p&gt;Once you've corrected the script, you will need to close
your editor and run the script from the commandline:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python mkgrade.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time you shouldn't get any message from Bash.  It
should just run the script as you asked it to and when
it finishes provide you with a new prompt.&lt;/p&gt;
&lt;p&gt;To make sure you've done everything correctly, you
should verify that you've created the necessary file
and that it has the correct content using the &lt;code&gt;cat&lt;/code&gt;
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat data/test.json 
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;grades&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;lab1&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;earned&amp;quot;&lt;/span&gt;: 9, 
            &lt;span class="s2"&gt;&amp;quot;possible&amp;quot;&lt;/span&gt;: 12
        &lt;span class="o"&gt;}&lt;/span&gt;, 
        &lt;span class="s2"&gt;&amp;quot;lab2&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;earned&amp;quot;&lt;/span&gt;: 12, 
            &lt;span class="s2"&gt;&amp;quot;possible&amp;quot;&lt;/span&gt;: 15
        &lt;span class="o"&gt;}&lt;/span&gt;, 
        &lt;span class="s2"&gt;&amp;quot;lab3&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;earned&amp;quot;&lt;/span&gt;: 20, 
            &lt;span class="s2"&gt;&amp;quot;possible&amp;quot;&lt;/span&gt;: 22
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Student A&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that you've created a test grade file with multiple
grades, you will create another script &lt;code&gt;report.py&lt;/code&gt; to read this file
and print a human readable message to the screen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;infile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c"&gt;# open the file &amp;#39;data/test.json&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# close infile&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;grades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;grades&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grades&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;lab1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;earned&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;grades&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;lab1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;possible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save your file and run it from the Bash prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python report.py 
  File &lt;span class="s2"&gt;&amp;quot;report.py&amp;quot;&lt;/span&gt;, line 3
    &lt;span class="nv"&gt;infile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c"&gt;# open the file &amp;#39;data/test.json&amp;#39;&lt;/span&gt;
                                            ^
SyntaxError: invalid syntax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now fix the top of the script so that it properly opens
&lt;code&gt;data/test.json&lt;/code&gt; and closes it.  Once you've fixed the
script, save it and test it from the Bash prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python report.py 
......................................................................
Student A 9 15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, you need to edit your script so that it prints out the
information a little more useful manner and do it for all three
lab assignments.  Once you are done, run your script again.  Exactly
how you do this is up to you (except that you need to use the variables
rather than just cutting and pasting the text from below.  You are
done when your output looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python report.py 
......................................................................
Student A got a 9 out of 12 on lab1
Student A got a 12 out of 15 on lab2
Student A got a 20 out of 22 on lab3
......................................................................
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may want to review &lt;a href="http://learnpythonthehardway.org/book/ex5.html"&gt;Exercise 5: More Variables and Printing&lt;/a&gt;
from &lt;em&gt;Learn Python the Hard Way&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Submit your work&lt;/h2&gt;
&lt;p&gt;Next you will query the status of your &lt;code&gt;git&lt;/code&gt; repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git status
On branch master
Your branch is ahead of &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt; by 1 commit.
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git push&amp;quot;&lt;/span&gt; to publish your &lt;span class="nb"&gt;local &lt;/span&gt;commits&lt;span class="o"&gt;)&lt;/span&gt;

Untracked files:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to include in what will be committed&lt;span class="o"&gt;)&lt;/span&gt;

        lab2/

nothing added to commit but untracked files present &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git add&amp;quot;&lt;/span&gt; to track&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also use the &lt;code&gt;tree&lt;/code&gt; command again to make sure you have all
the necessary files (this is what it should look like if you run it
from the top-level directory of your repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree
.
├── grades.json
├── info.py
├── lab2
│   ├── data
│   │   └── test.json
│   ├── mkgrade.py
│   └── report.py
└── README.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In particular, you need to make sure that in your &lt;code&gt;lab2&lt;/code&gt; directory
you have the following layout:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree
.
├── data
│   └── test.json
├── mkgrade.py
└── report.py

1 directory, 3 files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, you will need to add your new work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add lab2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that you only need to add the top directory and
&lt;code&gt;git&lt;/code&gt; automatically adds all the content of that directory.&lt;/p&gt;
&lt;p&gt;You can check this by examining the status of your repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git status 
On branch master
Your branch is ahead of &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt; by 1 commit.
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git push&amp;quot;&lt;/span&gt; to publish your &lt;span class="nb"&gt;local &lt;/span&gt;commits&lt;span class="o"&gt;)&lt;/span&gt;

Changes to be committed:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to unstage&lt;span class="o"&gt;)&lt;/span&gt;

        new file:   lab2/data/test.json
        new file:   lab2/mkgrade.py
        new file:   lab2/report.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Everything looks good, so go ahead and commit your change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Lab 2&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;master 129a55c&lt;span class="o"&gt;]&lt;/span&gt; Lab 2
 3 files changed, 51 insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;
 create mode 100644 lab2/data/test.json
 create mode 100644 lab2/mkgrade.py
 create mode 100644 lab2/report.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next take a look at a log of what's been done using
&lt;code&gt;git log&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At this point all your work was done locally, so the last thing
you need to do is push these changes up to your remote Github
repo using &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;</summary></entry><entry><title>Create your class repository</title><link href="http://berkeley-stat133.github.io/website/lab01.html" rel="alternate"></link><updated>2014-01-31T00:00:00-08:00</updated><author><name>Jarrod Millman</name></author><id>tag:berkeley-stat133.github.io,2014-01-31:website/lab01.html</id><summary type="html">&lt;p&gt;In this lab, you will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setup &lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a private homework repository on Github&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;info.py&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A Github educational account&lt;/li&gt;
&lt;li&gt;If you are using your own laptop, please install relevant &lt;a href="pages/software"&gt;software&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Setup &lt;code&gt;git&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You will be using &lt;code&gt;git&lt;/code&gt; to submit &lt;strong&gt;every lab assignment for grading&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt; is an extremely powerful version control system widely used in the
open source scientific computing community.  Rather than trying to learn
everything that you can about &lt;code&gt;git&lt;/code&gt; right away, you will only be learning
the things you need to immediately use.  Over the next several weeks, you
will incrementally learn how to use more of its features.&lt;/p&gt;
&lt;p&gt;Entering &lt;code&gt;git&lt;/code&gt; at a shell prompt, will produce output something like
this (try this on your own computer):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git
usage: git &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;args&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

The most commonly used git commands are:
   add        Add file contents to the index
   config     Get and &lt;span class="nb"&gt;set &lt;/span&gt;repository or global options
   clone      Clone a repository into a new directory   
   commit     Record changes to the repository
   log        Show commit logs
   push       Update remote refs along with associated objects
   status     Show the working tree status

&lt;span class="s1"&gt;&amp;#39;git help -a&amp;#39;&lt;/span&gt; and &lt;span class="s1"&gt;&amp;#39;git help -g&amp;#39;&lt;/span&gt; lists available subcommands and some
concept guides. See &lt;span class="s1"&gt;&amp;#39;git help &amp;lt;command&amp;gt;&amp;#39;&lt;/span&gt; or &lt;span class="s1"&gt;&amp;#39;git help &amp;lt;concept&amp;gt;&amp;#39;&lt;/span&gt;
to &lt;span class="nb"&gt;read &lt;/span&gt;about a specific subcommand or concept.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you try this on your computer, you will see much more information.
I've reduced the output so that it only contains information relevant
for today's lab.&lt;/p&gt;
&lt;p&gt;The first thing you need to do is configure &lt;code&gt;git&lt;/code&gt;.  Here is what
I did on my machine, you should use your own name and email address!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git config --global user.name &lt;span class="s2"&gt;&amp;quot;Jarrod Millman&amp;quot;&lt;/span&gt;
git config --global user.email &lt;span class="s2"&gt;&amp;quot;millman@berkeley.edu&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Create a private homework repository on Github&lt;/h2&gt;
&lt;p&gt;Make sure you are logged onto Github.  In your user bar at the top right
of any Github page, click the &lt;a href="https://github.com/new"&gt;"Create a New Repo"&lt;/a&gt;
button:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create New Repo" src="http://berkeley-stat133.github.io/website/images/github_create_new_repo.png" /&gt;&lt;/p&gt;
&lt;p&gt;This will take you to a new page where you will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Name your repository "stat133"&lt;/li&gt;
&lt;li&gt;Make sure it is private&lt;/li&gt;
&lt;li&gt;Select "Initialize this repository with a README"&lt;/li&gt;
&lt;li&gt;Choose "Python" in the pull-down menu to add a .gitignore file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your screen should look like this (except &lt;code&gt;jarrodmillman&lt;/code&gt; will
be replaced by your Github name):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create New Github Repo" src="http://berkeley-stat133.github.io/website/images/github_new_repo.png" /&gt;&lt;/p&gt;
&lt;p&gt;Once you click the "Create repository" button, you should see a
page like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Your New Repo" src="http://berkeley-stat133.github.io/website/images/github_s133_repo.png" /&gt;&lt;/p&gt;
&lt;p&gt;In order for me to see (and grade) your private repository, you will
need to add me as a colloborator.  In the lower right-hand corner of
your repositories main page, you should see a button labelled
"Settings".  Click on the "Settings" button will take you to
a page where you can edit various settings for your repository.
Choose the "Collaborators" button on the "Settings" page and
add me, &lt;code&gt;jarrodmillman&lt;/code&gt;, as well as the instructor, &lt;code&gt;BenoitDherin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Github Add Collaborator" src="http://berkeley-stat133.github.io/website/images/github_add_collab.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Clone repository to your local machine&lt;/h3&gt;
&lt;p&gt;First you will create a &lt;code&gt;src&lt;/code&gt; subdirectory in your home directory.
Then you will clone your repo inside of the &lt;code&gt;src&lt;/code&gt; subdirectory.
Please make sure to use your own Github username instead of mine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;            &lt;span class="c"&gt;# go to your home directory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir src     &lt;span class="c"&gt;# make a source subdirectory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;src
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/jarrodmillman/stat133.git
Cloning into &lt;span class="s1"&gt;&amp;#39;stat133&amp;#39;&lt;/span&gt;...
Username &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com&amp;#39;&lt;/span&gt;: jarrodmillman
Password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://jarrodmillman@github.com&amp;#39;&lt;/span&gt;: 
remote: Counting objects: 4, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;3/3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total 4 &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;, reused 0 &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;
Unpacking objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;4/4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now take a look at what is inside your repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;stat133/
&lt;span class="nv"&gt;$ &lt;/span&gt;ls
README.md
&lt;span class="nv"&gt;$ &lt;/span&gt;ls -a
.  ..  .git  .gitignore  README.md
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Create an &lt;code&gt;info.py&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;Now that you have a local copy of your repo, you will need to add
some new content.&lt;/p&gt;
&lt;p&gt;First, make sure you are in the top-level directory of your newly
cloned repository (note: you will be in the correct location if
you haven't changed directories since entering the above commands):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you aren't in the correct directory, you need to change your working directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/src/stat133
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open your text editor and create a new file, called &lt;code&gt;info.py&lt;/code&gt;.  Now
add the following content (replacing the values I've set with your own):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Jarrod Millman&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name@berkeley.edu&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;github_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;jarrodmillman&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next you will query the status of your &lt;code&gt;git&lt;/code&gt; repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git status 
On branch master
Your branch is up-to-date with &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

Untracked files:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to include in what will be committed&lt;span class="o"&gt;)&lt;/span&gt;

        info.py

nothing added to commit but untracked files present &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git add&amp;quot;&lt;/span&gt; to track&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you should see, &lt;code&gt;git&lt;/code&gt; tells you that there is a new file that is not
being tracked.  Following the advice, try adding your new file to the repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add info.py 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now check on the status of your repo again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git status 
On branch master
Your branch is up-to-date with &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

Changes to be committed:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to unstage&lt;span class="o"&gt;)&lt;/span&gt;

        new file:   info.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Everything looks good, so go ahead and commit your change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Add personal info&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;master bbc329f&lt;span class="o"&gt;]&lt;/span&gt; Add personal info
 1 file changed, 4 insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;
 create mode 100644 info.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next take a look at a log of what's been done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git log 
commit bbc329fe5f0672582a3ad3c70f5b86f4acc15f63
Author: Jarrod Millman &amp;lt;jarrod.millman@gmail.com&amp;gt;
Date:   Wed Jan 29 14:19:38 2014 -0800

    Add personal info

commit dead6f41c65e50f444760653205e21083caabfcc
Author: Jarrod Millman &amp;lt;jarrod.millman@gmail.com&amp;gt;
Date:   Tue Jan 28 22:29:33 2014 -0800

    Initial commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point you've created a new file, added it to your
repo, and committed the current state of your repo.  This
was all done locally, so the next thing to do is push these
changes back up to your remote Github repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push 
Username &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com&amp;#39;&lt;/span&gt;: jarrodmillman
Password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://jarrodmillman@github.com&amp;#39;&lt;/span&gt;: 
Counting objects: 4, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to 4 threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;3/3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;3/3&lt;span class="o"&gt;)&lt;/span&gt;, 359 bytes | 0 bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Total 3 &lt;span class="o"&gt;(&lt;/span&gt;delta 1&lt;span class="o"&gt;)&lt;/span&gt;, reused 0 &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;
To https://github.com/jarrodmillman/stat133
   dead6f4..bbc329f  master -&amp;gt; master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, your Github repository main page should look
something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Your New Repo" src="http://berkeley-stat133.github.io/website/images/github_s133_repo_2ndcommit.png" /&gt;&lt;/p&gt;
&lt;p&gt;Note that there is now a new file and the number of commits has
been incremented to 2.&lt;/p&gt;</summary></entry><entry><title>Create a github account</title><link href="http://berkeley-stat133.github.io/website/lab00.html" rel="alternate"></link><updated>2014-01-24T00:00:00-08:00</updated><author><name>Jarrod Millman</name></author><id>tag:berkeley-stat133.github.io,2014-01-24:website/lab00.html</id><summary type="html">&lt;p&gt;In the first lab, we will deal with account and installation issues.&lt;/p&gt;
&lt;p&gt;During future labs, we will make heavy use of git and github.  Every student
will need a Github student account for submitting their lab work:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/join"&gt;Create account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edu"&gt;Request a student account&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary></entry></feed>